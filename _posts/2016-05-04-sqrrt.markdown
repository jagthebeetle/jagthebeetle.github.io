---
layout: post
title:  "sqrrt"
date:   2016-05-04
categories: musing
image: /assets/rapidly-exploring-random-tree.jpg
width: 1240
height: 1240
---
Rooting through three-dimensional, or rather, metric space, the rapidly exploring random tree (RRT) iteratively, 
(arguably artfully) draws targeted routes to randomly generated coordinates, thereby arriving at thorough, 
comprehensive consideration of configurations.

(Consonance is Jonathan's fancy.)

There's something almost disconcerting about [Jason Davies' take on RRTs](https://www.jasondavies.com/rrt/).
Look long enough and the mesh seems organically to pop and unfurl, formicate, and crawl. The only reasonable
thing to do, of course, is to replicate and transmogrify.

Straightforward replication is dull, but constructive. As I'm not visualizing anything, except possible escape routes
through a blacked out abyssaly empty flatland, I decided to ignore the 
[common wisdom](http://www.scribblelive.com/blog/2012/04/04/rainbow-color-scales/) that 
[rainbows are harmful](http://bl.ocks.org/mbostock/3290752), and encode distance from the starting point as the particular 
path segment's hue.

<div id="rrt2d" role='img' class="square" title="2D rapidly exploring random tree"></div>

The gist is as follows: 
```
rrt = Tree(seed)

newNode = randomSample()
nearestNode = rrt.nearestNode(newNode)
rrt.connect(nearestNode, newNode)

```

Thanks to Davies', we get the notion of not actually connecting `nearestNode` to `newNode`, but 
rather marginally stepping towards it (refreshing our lovely trigonometry while we do so). This happens to be
key, I think, in giving the structure a more organic shape. Otherwise you could something more Kandinsky-esque,
more like pick-up sticks than an organic growth.

A smart, determined fellow at this point asks, "How do you calculate the nearestNode in sublinear time?"
To this I respond, "Nay, I choose the approach that the most naive of computer scientists (such as myself)
would decry as O(n)! (Have at your k-d/R/R* trees!)"

A more interesting exercise for the nonce is to generalize this to three dimensions! (An opportunity to play 
with threes.js not to be passed up!)

<div id="rrt3d" role='img' class="square" title="3D rapidly exploring random tree"></div>

Some interesting variations (formerly known as bugs) arose during my creation of this. So as to avoid firing
up three rendering contexts and melting certain devices, I describe them: c
 - Calculate your distance erroneously,
forgetting to account for the z coordinate, and you end up with a remarkably flat structure more or less
coplanar with the X-Y plane.

 - Just for the heck of it, generate numbers in a larger range for one of the coordinates, and you end up
 with something that looks miraculously like a tree.

 Random exploration is a dangerous world, friends. Natural selection by adroitness with Euclidean formulas
 and trigonometry and bears, oh my!

{% if page.categories contains 'partials' %}
<span load-js='//cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js'></span>
<span load-js='/js/rrt2.js'></span>
<span load-js='//cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.min.js'></span>
<span load-js='/js/rrt3.js'></span>
{% endif %}

